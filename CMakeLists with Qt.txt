cmake_minimum_required(VERSION 3.5)
project(CSCI207_Project LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_PREFIX_PATH "C:\\Qt\\6.6.1\\mingw_64\\")
set(Vulkan_INCLUDE_DIR "C:\\VulkanSDK\\1.3.268.0\\Include\\vulkan\\")
set(app_icon_resource_windows "${CMAKE_CURRENT_SOURCE_DIR}/icon.qrc")

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)

set(PROJECT_SOURCES
        ../src/main.cpp
        ../src/BST.h
        ../src/BSTNode.h
        ../src/LinkedList.h
        ../src/SparePart.h
        ../src/SparePartNode.h
        ../src/Stack.h
        ../src/Supplier.h
        ../src/SupplierNode.h
        ../src/gui/LLSparePartDialog.h
        ../src/gui/LLSupplierDialog.h
        ../src/gui/LogDisplay.h
        ../src/gui/mainwindow.cpp
        ../src/gui/mainwindow.h
        ../src/gui/SparePartDialog.h
        ../src/gui/SparePartsView.cpp
        ../src/gui/SparePartsView.h
        ../src/gui/SupplierDialog.h
        ../src/gui/SuppliersView.cpp
        ../src/gui/SuppliersView.h
)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(CSCI207_Project
            MANUAL_FINALIZATION
            ${PROJECT_SOURCES}
            ${app_icon_resource_windows}
            )
    # Define target properties for Android with Qt 6 as:
    #    set_property(TARGET CSCI207_Project APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
    #                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
    # For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation
else()
    if(ANDROID)
        add_library(CSCI207_Project SHARED
                ${PROJECT_SOURCES}
                )
        # Define properties for Android with Qt 5 after find_package() calls as:
        #    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(CSCI207_Project
                ${PROJECT_SOURCES}
                ${app_icon_resource_windows}
                )
    endif()
endif()

target_link_libraries(CSCI207_Project PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)

# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
#set(BUNDLE_ID_OPTION "")
#if(${QT_VERSION} VERSION_LESS 6.1.0)
#    set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.CSCI207_Project)
#endif()
#set_target_properties(CSCI207_Project PROPERTIES
#    ${BUNDLE_ID_OPTION}
#    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
#    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
#    MACOSX_BUNDLE TRUE
#    WIN32_EXECUTABLE TRUE
#)

include(GNUInstallDirs)
install(TARGETS CSCI207_Project
        BUNDLE DESTINATION .
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        )

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(CSCI207_Project)
endif()
